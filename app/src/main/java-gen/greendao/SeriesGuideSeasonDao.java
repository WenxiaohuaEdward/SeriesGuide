package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SERIES_GUIDE_SEASON".
*/
public class SeriesGuideSeasonDao extends AbstractDao<SeriesGuideSeason, Long> {

    public static final String TABLENAME = "SERIES_GUIDE_SEASON";

    /**
     * Properties of entity SeriesGuideSeason.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Score = new Property(3, Double.class, "score", false, "SCORE");
        public final static Property Cat = new Property(4, String.class, "cat", false, "CAT");
        public final static Property Brief = new Property(5, String.class, "brief", false, "BRIEF");
        public final static Property Cover = new Property(6, String.class, "cover", false, "COVER");
        public final static Property EnTitle = new Property(7, String.class, "enTitle", false, "EN_TITLE");
        public final static Property PlayStatus = new Property(8, String.class, "playStatus", false, "PLAY_STATUS");
        public final static Property CreateTimeStr = new Property(9, String.class, "createTimeStr", false, "CREATE_TIME_STR");
        public final static Property IsFocus = new Property(10, Boolean.class, "isFocus", false, "IS_FOCUS");
        public final static Property ViewCount = new Property(11, Integer.class, "viewCount", false, "VIEW_COUNT");
        public final static Property UpdateInfo = new Property(12, Integer.class, "updateInfo", false, "UPDATE_INFO");
        public final static Property Total = new Property(13, Integer.class, "total", false, "TOTAL");
        public final static Property CreateTime = new Property(14, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(15, Long.class, "updateTime", false, "UPDATE_TIME");
    };


    public SeriesGuideSeasonDao(DaoConfig config) {
        super(config);
    }
    
    public SeriesGuideSeasonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SERIES_GUIDE_SEASON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"TYPE\" TEXT," + // 2: type
                "\"SCORE\" REAL," + // 3: score
                "\"CAT\" TEXT," + // 4: cat
                "\"BRIEF\" TEXT," + // 5: brief
                "\"COVER\" TEXT," + // 6: cover
                "\"EN_TITLE\" TEXT," + // 7: enTitle
                "\"PLAY_STATUS\" TEXT," + // 8: playStatus
                "\"CREATE_TIME_STR\" TEXT," + // 9: createTimeStr
                "\"IS_FOCUS\" INTEGER," + // 10: isFocus
                "\"VIEW_COUNT\" INTEGER," + // 11: viewCount
                "\"UPDATE_INFO\" INTEGER," + // 12: updateInfo
                "\"TOTAL\" INTEGER," + // 13: total
                "\"CREATE_TIME\" INTEGER," + // 14: createTime
                "\"UPDATE_TIME\" INTEGER);"); // 15: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SERIES_GUIDE_SEASON\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SeriesGuideSeason entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        Double score = entity.getScore();
        if (score != null) {
            stmt.bindDouble(4, score);
        }
 
        String cat = entity.getCat();
        if (cat != null) {
            stmt.bindString(5, cat);
        }
 
        String brief = entity.getBrief();
        if (brief != null) {
            stmt.bindString(6, brief);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(7, cover);
        }
 
        String enTitle = entity.getEnTitle();
        if (enTitle != null) {
            stmt.bindString(8, enTitle);
        }
 
        String playStatus = entity.getPlayStatus();
        if (playStatus != null) {
            stmt.bindString(9, playStatus);
        }
 
        String createTimeStr = entity.getCreateTimeStr();
        if (createTimeStr != null) {
            stmt.bindString(10, createTimeStr);
        }
 
        Boolean isFocus = entity.getIsFocus();
        if (isFocus != null) {
            stmt.bindLong(11, isFocus ? 1L: 0L);
        }
 
        Integer viewCount = entity.getViewCount();
        if (viewCount != null) {
            stmt.bindLong(12, viewCount);
        }
 
        Integer updateInfo = entity.getUpdateInfo();
        if (updateInfo != null) {
            stmt.bindLong(13, updateInfo);
        }
 
        Integer total = entity.getTotal();
        if (total != null) {
            stmt.bindLong(14, total);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(15, createTime);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(16, updateTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SeriesGuideSeason readEntity(Cursor cursor, int offset) {
        SeriesGuideSeason entity = new SeriesGuideSeason( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // score
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cat
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // brief
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cover
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // enTitle
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // playStatus
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // createTimeStr
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // isFocus
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // viewCount
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // updateInfo
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // total
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // createTime
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15) // updateTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SeriesGuideSeason entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setScore(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setCat(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBrief(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCover(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEnTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPlayStatus(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreateTimeStr(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsFocus(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setViewCount(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setUpdateInfo(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setTotal(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setCreateTime(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setUpdateTime(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SeriesGuideSeason entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SeriesGuideSeason entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
